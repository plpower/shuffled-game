{"ast":null,"code":"const splitWordsIntoVowelsAndConsonants = words => {\n  const vowels = [];\n  const consonants = [];\n  words.forEach((word, index) => {\n    var _word$match, _word$match2;\n    const vowelsInWord = ((_word$match = word.match(/[aeiou]/gi)) === null || _word$match === void 0 ? void 0 : _word$match.join(\"\")) || \"\";\n    const consonantsInWord = ((_word$match2 = word.match(/[^aeiou]/gi)) === null || _word$match2 === void 0 ? void 0 : _word$match2.join(\"\")) || \"\";\n    vowels.push({\n      word: vowelsInWord,\n      originalPosition: index\n    });\n    consonants.push({\n      word: consonantsInWord,\n      originalPosition: index\n    });\n  });\n  return {\n    vowels,\n    consonants\n  };\n};\nconst shuffleVowels = vowels => {\n  const shuffledVowels = vowels.map(({\n    word,\n    originalPosition\n  }) => ({\n    word,\n    originalPosition,\n    newPosition: originalPosition\n  }));\n  for (let i = shuffledVowels.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap elements using destructuring assignment\n    [shuffledVowels[i], shuffledVowels[j]] = [shuffledVowels[j], shuffledVowels[i]];\n  }\n  return shuffledVowels;\n};\nexport { shuffleVowels };","map":{"version":3,"names":["splitWordsIntoVowelsAndConsonants","words","vowels","consonants","forEach","word","index","_word$match","_word$match2","vowelsInWord","match","join","consonantsInWord","push","originalPosition","shuffleVowels","shuffledVowels","map","newPosition","i","length","j","Math","floor","random"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/game-engine/shuffleObject.tsx"],"sourcesContent":["interface WordWithPosition {\n  word: string;\n  originalPosition: number;\n}\n\ninterface ShuffledWordObjectWithPosition extends WordWithPosition {\n  newPosition: number;\n}\n\nconst splitWordsIntoVowelsAndConsonants = (\n  words: string[]\n): { vowels: WordWithPosition[]; consonants: WordWithPosition[] } => {\n  const vowels: WordWithPosition[] = [];\n  const consonants: WordWithPosition[] = [];\n\n  words.forEach((word, index) => {\n    const vowelsInWord = word.match(/[aeiou]/gi)?.join(\"\") || \"\";\n    const consonantsInWord = word.match(/[^aeiou]/gi)?.join(\"\") || \"\";\n\n    vowels.push({ word: vowelsInWord, originalPosition: index });\n    consonants.push({ word: consonantsInWord, originalPosition: index });\n  });\n\n  return { vowels, consonants };\n};\n\nconst shuffleVowels = (\n  vowels: WordWithPosition[]\n): ShuffledWordObjectWithPosition[] => {\n  const shuffledVowels: ShuffledWordObjectWithPosition[] = vowels.map(\n    ({ word, originalPosition }) => ({\n      word,\n      originalPosition,\n      newPosition: originalPosition,\n    })\n  );\n\n  for (let i = shuffledVowels.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap elements using destructuring assignment\n    [shuffledVowels[i], shuffledVowels[j]] = [\n      shuffledVowels[j],\n      shuffledVowels[i],\n    ];\n  }\n\n  return shuffledVowels;\n};\n\nexport { shuffleVowels };\n"],"mappings":"AASA,MAAMA,iCAAiC,GACrCC,KAAe,IACoD;EACnE,MAAMC,MAA0B,GAAG,EAAE;EACrC,MAAMC,UAA8B,GAAG,EAAE;EAEzCF,KAAK,CAACG,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAAA,IAAAC,WAAA,EAAAC,YAAA;IAC7B,MAAMC,YAAY,GAAG,EAAAF,WAAA,GAAAF,IAAI,CAACK,KAAK,CAAC,WAAW,CAAC,cAAAH,WAAA,uBAAvBA,WAAA,CAAyBI,IAAI,CAAC,EAAE,CAAC,KAAI,EAAE;IAC5D,MAAMC,gBAAgB,GAAG,EAAAJ,YAAA,GAAAH,IAAI,CAACK,KAAK,CAAC,YAAY,CAAC,cAAAF,YAAA,uBAAxBA,YAAA,CAA0BG,IAAI,CAAC,EAAE,CAAC,KAAI,EAAE;IAEjET,MAAM,CAACW,IAAI,CAAC;MAAER,IAAI,EAAEI,YAAY;MAAEK,gBAAgB,EAAER;IAAM,CAAC,CAAC;IAC5DH,UAAU,CAACU,IAAI,CAAC;MAAER,IAAI,EAAEO,gBAAgB;MAAEE,gBAAgB,EAAER;IAAM,CAAC,CAAC;EACtE,CAAC,CAAC;EAEF,OAAO;IAAEJ,MAAM;IAAEC;EAAW,CAAC;AAC/B,CAAC;AAED,MAAMY,aAAa,GACjBb,MAA0B,IACW;EACrC,MAAMc,cAAgD,GAAGd,MAAM,CAACe,GAAG,CACjE,CAAC;IAAEZ,IAAI;IAAES;EAAiB,CAAC,MAAM;IAC/BT,IAAI;IACJS,gBAAgB;IAChBI,WAAW,EAAEJ;EACf,CAAC,CACH,CAAC;EAED,KAAK,IAAIK,CAAC,GAAGH,cAAc,CAACI,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAClD,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;;IAE7C;IACA,CAACH,cAAc,CAACG,CAAC,CAAC,EAAEH,cAAc,CAACK,CAAC,CAAC,CAAC,GAAG,CACvCL,cAAc,CAACK,CAAC,CAAC,EACjBL,cAAc,CAACG,CAAC,CAAC,CAClB;EACH;EAEA,OAAOH,cAAc;AACvB,CAAC;AAED,SAASD,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}