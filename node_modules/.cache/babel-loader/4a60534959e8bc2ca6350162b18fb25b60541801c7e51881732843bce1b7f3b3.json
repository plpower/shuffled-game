{"ast":null,"code":"const shuffleWordObjectsWithPositions = wordObjects => {\n  const wordObjectsWithPositions = wordObjects.map(({\n    word,\n    position\n  }) => ({\n    word,\n    originalPosition: position,\n    newPosition: position\n  }));\n  let currentIndex = wordObjectsWithPositions.length,\n    randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n    currentIndex--;\n    randomIndex = Math.floor(Math.random() * currentIndex);\n\n    // Swap elements using destructuring assignment\n    [wordObjectsWithPositions[currentIndex], wordObjectsWithPositions[randomIndex]] = [wordObjectsWithPositions[randomIndex], wordObjectsWithPositions[currentIndex]];\n  }\n  for (let i = wordObjectsWithPositions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap elements using destructuring assignment\n    [wordObjectsWithPositions[i], wordObjectsWithPositions[j]] = [wordObjectsWithPositions[j], wordObjectsWithPositions[i]];\n  }\n  return wordObjectsWithPositions;\n};\nexport { shuffleWordObjectsWithPositions };\n\n// // Example usage:\n// const originalWordObjects = [\n//   { word: \"apple\", position: 0 },\n//   { word: \"banana\", position: 1 },\n//   { word: \"cherry\", position: 2 },\n//   { word: \"date\", position: 3 },\n//   { word: \"elderberry\", position: 4 },\n// ];\n\n// const shuffledWordObjectsWithPositions =\n//   shuffleWordObjectsWithPositions(originalWordObjects);\n\n// console.log(\"Original Word Objects:\", originalWordObjects);\n// console.log(\n//   \"Shuffled Word Objects with Positions:\",\n//   shuffledWordObjectsWithPositions\n// );","map":{"version":3,"names":["shuffleWordObjectsWithPositions","wordObjects","wordObjectsWithPositions","map","word","position","originalPosition","newPosition","currentIndex","length","randomIndex","Math","floor","random","i","j"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/game-engine/shuffleObject.tsx"],"sourcesContent":["interface WordObjectWithPositions {\n  word: string;\n  originalPosition: number;\n  newPosition: number;\n}\n\nconst shuffleWordObjectsWithPositions = (\n  wordObjects: { word: string; position: number }[]\n): WordObjectWithPositions[] => {\n  const wordObjectsWithPositions: WordObjectWithPositions[] = wordObjects.map(\n    ({ word, position }) => ({\n      word,\n      originalPosition: position,\n      newPosition: position,\n    })\n  );\n\n  let currentIndex = wordObjectsWithPositions.length,\n    randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n    currentIndex--;\n    randomIndex = Math.floor(Math.random() * currentIndex);\n\n    // Swap elements using destructuring assignment\n    [\n      wordObjectsWithPositions[currentIndex],\n      wordObjectsWithPositions[randomIndex],\n    ] = [\n      wordObjectsWithPositions[randomIndex],\n      wordObjectsWithPositions[currentIndex],\n    ];\n  }\n\n  for (let i = wordObjectsWithPositions.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap elements using destructuring assignment\n    [wordObjectsWithPositions[i], wordObjectsWithPositions[j]] = [\n      wordObjectsWithPositions[j],\n      wordObjectsWithPositions[i],\n    ];\n  }\n\n  return wordObjectsWithPositions;\n};\n\nexport { shuffleWordObjectsWithPositions };\n\n// // Example usage:\n// const originalWordObjects = [\n//   { word: \"apple\", position: 0 },\n//   { word: \"banana\", position: 1 },\n//   { word: \"cherry\", position: 2 },\n//   { word: \"date\", position: 3 },\n//   { word: \"elderberry\", position: 4 },\n// ];\n\n// const shuffledWordObjectsWithPositions =\n//   shuffleWordObjectsWithPositions(originalWordObjects);\n\n// console.log(\"Original Word Objects:\", originalWordObjects);\n// console.log(\n//   \"Shuffled Word Objects with Positions:\",\n//   shuffledWordObjectsWithPositions\n// );\n"],"mappings":"AAMA,MAAMA,+BAA+B,GACnCC,WAAiD,IACnB;EAC9B,MAAMC,wBAAmD,GAAGD,WAAW,CAACE,GAAG,CACzE,CAAC;IAAEC,IAAI;IAAEC;EAAS,CAAC,MAAM;IACvBD,IAAI;IACJE,gBAAgB,EAAED,QAAQ;IAC1BE,WAAW,EAAEF;EACf,CAAC,CACH,CAAC;EAED,IAAIG,YAAY,GAAGN,wBAAwB,CAACO,MAAM;IAChDC,WAAW;;EAEb;EACA,OAAOF,YAAY,GAAG,CAAC,EAAE;IACvBA,YAAY,EAAE;IACdE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,YAAY,CAAC;;IAEtD;IACA,CACEN,wBAAwB,CAACM,YAAY,CAAC,EACtCN,wBAAwB,CAACQ,WAAW,CAAC,CACtC,GAAG,CACFR,wBAAwB,CAACQ,WAAW,CAAC,EACrCR,wBAAwB,CAACM,YAAY,CAAC,CACvC;EACH;EAEA,KAAK,IAAIM,CAAC,GAAGZ,wBAAwB,CAACO,MAAM,GAAG,CAAC,EAAEK,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5D,MAAMC,CAAC,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAE7C;IACA,CAACZ,wBAAwB,CAACY,CAAC,CAAC,EAAEZ,wBAAwB,CAACa,CAAC,CAAC,CAAC,GAAG,CAC3Db,wBAAwB,CAACa,CAAC,CAAC,EAC3Bb,wBAAwB,CAACY,CAAC,CAAC,CAC5B;EACH;EAEA,OAAOZ,wBAAwB;AACjC,CAAC;AAED,SAASF,+BAA+B;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}