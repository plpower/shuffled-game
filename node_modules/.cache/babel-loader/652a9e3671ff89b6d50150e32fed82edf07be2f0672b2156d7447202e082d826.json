{"ast":null,"code":"var _jsxFileName = \"/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/components/buttonGroup.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ButtonGroup.css'; // Import your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonGroup = ({\n  words,\n  setGuess,\n  guess,\n  setIndex,\n  idx\n}) => {\n  _s();\n  const [selectedButton, setSelectedButton] = useState(0);\n  const handleButtonClick = id => {\n    setSelectedButton(id === selectedButton ? 0 : id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-group-container\",\n    children: words.map((button, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `button ${index + 1 === selectedButton ? \"selected\" : \"\"}`,\n      onClick: () => {\n        setGuess({\n          ...guess,\n          v: button\n        });\n        setIndex(index);\n        handleButtonClick(index + 1);\n      },\n      children: button\n    }, index + 1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonGroup, \"rtqy4Nny92MLv3yknRqwFPAC6tM=\");\n_c = ButtonGroup;\nexport default ButtonGroup;\nvar _c;\n$RefreshReg$(_c, \"ButtonGroup\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ButtonGroup","words","setGuess","guess","setIndex","idx","_s","selectedButton","setSelectedButton","handleButtonClick","id","className","children","map","button","index","onClick","v","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/components/buttonGroup.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction, useState } from 'react';\nimport './ButtonGroup.css'; // Import your CSS file for styling\nimport Guess from '../game-engine/Guess';\n\ninterface ButtonGroupProps {\n  words: string[];\n  setGuess: Dispatch<SetStateAction<Guess>>;\n  guess: Guess;\n  setIndex: Dispatch<SetStateAction<number>>;\n  idx: number;\n  //   onClear: () => void;\n  //   isDisabled: boolean; // Add the new prop\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({ words, setGuess, guess, setIndex, idx }) => {\n  const [selectedButton, setSelectedButton] = useState(0);\n\n  const handleButtonClick = (id: number) => {\n    setSelectedButton(id === selectedButton ? 0 : id);\n  };\n\n  return (\n    <div className=\"button-group-container\">\n      {words.map((button, index) => (\n        <button\n          key={index + 1}\n          className={`button ${index + 1 === selectedButton ? \"selected\" : \"\"}`}\n          onClick={() => {\n            setGuess({...guess, v: button});\n            setIndex(index)\n            handleButtonClick(index + 1);\n          }}\n        >\n          {button}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAA8BC,QAAQ,QAAQ,OAAO;AACjE,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAa5B,MAAMC,WAAuC,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAMY,iBAAiB,GAAIC,EAAU,IAAK;IACxCF,iBAAiB,CAACE,EAAE,KAAKH,cAAc,GAAG,CAAC,GAAGG,EAAE,CAAC;EACnD,CAAC;EAED,oBACEX,OAAA;IAAKY,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EACpCX,KAAK,CAACY,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvBhB,OAAA;MAEEY,SAAS,EAAG,UAASI,KAAK,GAAG,CAAC,KAAKR,cAAc,GAAG,UAAU,GAAG,EAAG,EAAE;MACtES,OAAO,EAAEA,CAAA,KAAM;QACbd,QAAQ,CAAC;UAAC,GAAGC,KAAK;UAAEc,CAAC,EAAEH;QAAM,CAAC,CAAC;QAC/BV,QAAQ,CAACW,KAAK,CAAC;QACfN,iBAAiB,CAACM,KAAK,GAAG,CAAC,CAAC;MAC9B,CAAE;MAAAH,QAAA,EAEDE;IAAM,GARFC,KAAK,GAAG,CAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASR,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACf,EAAA,CAxBIN,WAAuC;AAAAsB,EAAA,GAAvCtB,WAAuC;AA0B7C,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}