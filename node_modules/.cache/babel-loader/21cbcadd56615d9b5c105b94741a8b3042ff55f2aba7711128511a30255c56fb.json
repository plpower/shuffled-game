{"ast":null,"code":"import React from\"react\";import\"./checkGuessButtons.css\";// Import your CSS file for styling\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const NytButtonGroup=_ref=>{let{guess,setIsCorrect,strikes,setStrikes,correctPsns,setCorrectPsns,displayVowels,displayConsonants,setDisplayVowels,setDisplayConsonants,selectedCButton,setSelectedCButton,selectedVButton,setSelectedVButton}=_ref;function moveItemToTop(position){if(position>=0&&position<=displayVowels.length){const newVArray=displayVowels.filter(item=>item.originalPosition!==position);const movedVowel=displayVowels.find(obj=>obj.originalPosition===position);const newCArray=displayConsonants.filter(item=>item.originalPosition!==position);const movedConsonant=displayConsonants.find(obj=>obj.originalPosition===position);console.log(movedVowel,movedConsonant,newCArray,newVArray);if(movedVowel&&movedConsonant){// Insert the moved item at the beginning of the array\nnewVArray.unshift(movedVowel);newCArray.unshift(movedConsonant);setDisplayVowels(newVArray);setDisplayConsonants(newCArray);}}}const onCheck=()=>{if(guess.v===guess.c){setIsCorrect(true);setCorrectPsns([...correctPsns,guess.v]);moveItemToTop(guess.v);//   moveItemToTop;\nsetSelectedVButton(0);setSelectedCButton(0);}else{if(strikes.find(obj=>obj.v===guess.v&&obj.c===guess.c)){setSelectedVButton(0);setSelectedCButton(0);}else{setStrikes([...strikes,{v:guess.v,c:guess.c}]);setSelectedVButton(0);setSelectedCButton(0);}}};const onClear=()=>{setSelectedVButton(0);setSelectedCButton(0);};return/*#__PURE__*/_jsxs(\"div\",{className:\"nyt-button-group-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"nyt-button nyt-button-check\",onClick:onCheck,children:\"Check\"}),/*#__PURE__*/_jsx(\"div\",{className:\"nyt-button nyt-button-clear\",onClick:onClear,children:\"Clear\"})]});};export default NytButtonGroup;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","NytButtonGroup","_ref","guess","setIsCorrect","strikes","setStrikes","correctPsns","setCorrectPsns","displayVowels","displayConsonants","setDisplayVowels","setDisplayConsonants","selectedCButton","setSelectedCButton","selectedVButton","setSelectedVButton","moveItemToTop","position","length","newVArray","filter","item","originalPosition","movedVowel","find","obj","newCArray","movedConsonant","console","log","unshift","onCheck","v","c","onClear","className","children","onClick"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/components/checkGuess/checkGuessButtons.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction } from \"react\";\nimport \"./checkGuessButtons.css\"; // Import your CSS file for styling\nimport { Guess } from \"../../game-engine/Guess\";\nimport { WordWithPosition } from \"../../game-engine/shuffleObject\";\n\ninterface NytButtonGroupProps {\n  words: string[];\n  guess: Guess;\n  strikes: Guess[];\n  idx: number;\n  setIsCorrect: Dispatch<SetStateAction<boolean>>;\n  setStrikes: Dispatch<SetStateAction<Guess[]>>;\n  correctPsns: number[];\n  setCorrectPsns: Dispatch<SetStateAction<number[]>>;\n  displayVowels: WordWithPosition[];\n  displayConsonants: WordWithPosition[];\n  setDisplayVowels: Dispatch<SetStateAction<WordWithPosition[]>>;\n  setDisplayConsonants: Dispatch<SetStateAction<WordWithPosition[]>>;\n  selectedCButton: number;\n  setSelectedCButton: Dispatch<SetStateAction<number>>;\n  selectedVButton: number;\n  setSelectedVButton: Dispatch<SetStateAction<number>>;\n}\n\nconst NytButtonGroup: React.FC<NytButtonGroupProps> = ({\n  guess,\n  setIsCorrect,\n  strikes,\n  setStrikes,\n  correctPsns,\n  setCorrectPsns,\n  displayVowels,\n  displayConsonants,\n  setDisplayVowels,\n  setDisplayConsonants,\n  selectedCButton,\n  setSelectedCButton,\n  selectedVButton,\n  setSelectedVButton,\n}) => {\n  function moveItemToTop(position: number): void {\n    if (position >= 0 && position <= displayVowels.length) {\n      const newVArray = displayVowels.filter(\n        (item) => item.originalPosition !== position\n      );\n      const movedVowel = displayVowels.find(\n        (obj) => obj.originalPosition === position\n      );\n      const newCArray = displayConsonants.filter(\n        (item) => item.originalPosition !== position\n      );\n      const movedConsonant = displayConsonants.find(\n        (obj) => obj.originalPosition === position\n      );\n\n      console.log(movedVowel, movedConsonant, newCArray, newVArray);\n\n      if (movedVowel && movedConsonant) {\n        // Insert the moved item at the beginning of the array\n        newVArray.unshift(movedVowel);\n        newCArray.unshift(movedConsonant);\n        setDisplayVowels(newVArray);\n        setDisplayConsonants(newCArray);\n      }\n    }\n  }\n\n  const onCheck = () => {\n    if (guess.v === guess.c) {\n      setIsCorrect(true);\n      setCorrectPsns([...correctPsns, guess.v]);\n      moveItemToTop(guess.v); //   moveItemToTop;\n      setSelectedVButton(0);\n      setSelectedCButton(0);\n    } else {\n      if (strikes.find((obj) => obj.v === guess.v && obj.c === guess.c)) {\n        setSelectedVButton(0);\n        setSelectedCButton(0);\n      } else {\n        setStrikes([...strikes, { v: guess.v, c: guess.c }]);\n        setSelectedVButton(0);\n        setSelectedCButton(0);\n      }\n    }\n  };\n\n  const onClear = () => {\n    setSelectedVButton(0);\n    setSelectedCButton(0);\n  };\n\n  return (\n    <div className=\"nyt-button-group-container\">\n      <div className=\"nyt-button nyt-button-check\" onClick={onCheck}>\n        Check\n      </div>\n      <div className=\"nyt-button nyt-button-clear\" onClick={onClear}>\n        Clear\n      </div>\n    </div>\n  );\n};\n\nexport default NytButtonGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}