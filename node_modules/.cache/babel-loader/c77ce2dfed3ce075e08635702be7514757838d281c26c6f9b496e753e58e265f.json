{"ast":null,"code":"var _jsxFileName = \"/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/components/buttonGroup.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./ButtonGroup.css\"; // Import your CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonGroup = ({\n  originalWords,\n  words,\n  setGuess,\n  guess,\n  setIndex,\n  isVowel,\n  correct,\n  selectedButton,\n  setSelectedButton\n}) => {\n  _s();\n  //   const [selectedButton, setSelectedButton] = useState(0);\n\n  useEffect(() => {\n    console.log('render');\n  }, [selectedButton]);\n  const handleButtonClick = id => {\n    setSelectedButton(id === selectedButton ? 0 : id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"button-group-container\",\n    children: words.map((button, index) =>\n    /*#__PURE__*/\n    // !correct.includes(button.originalPosition) &&\n    _jsxDEV(\"button\", {\n      //   onAnimationEnd={() => setWobble(0)}\n      className: `button ${index + 1 === selectedButton ? \"selected\" : \"\"}`,\n      disabled: correct.includes(button.originalPosition),\n      onClick: () => {\n        if (isVowel) {\n          setIndex(index);\n          setGuess({\n            ...guess,\n            v: button.originalPosition\n          });\n        } else {\n          setGuess({\n            ...guess,\n            c: button.originalPosition\n          });\n        }\n        handleButtonClick(index + 1);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: button.word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: words[button.originalPosition].word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, index + 1, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonGroup, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ButtonGroup;\nexport default ButtonGroup;\nvar _c;\n$RefreshReg$(_c, \"ButtonGroup\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","ButtonGroup","originalWords","words","setGuess","guess","setIndex","isVowel","correct","selectedButton","setSelectedButton","_s","console","log","handleButtonClick","id","className","children","map","button","index","disabled","includes","originalPosition","onClick","v","c","word","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/components/buttonGroup.tsx"],"sourcesContent":["import React, { Dispatch, SetStateAction, useEffect } from \"react\";\nimport \"./ButtonGroup.css\"; // Import your CSS file for styling\nimport {Guess} from \"../game-engine/Guess\";\nimport { WordWithPosition } from \"../game-engine/shuffleObject\";\n\ninterface ButtonGroupProps {\n    originalWords\n  words: WordWithPosition[];\n  setGuess: Dispatch<SetStateAction<Guess>>;\n  guess: Guess;\n  setIndex: Dispatch<SetStateAction<number>>;\n  idx: number;\n  isVowel: boolean;\n  correct: number[];\n  selectedButton: number;\n  setSelectedButton: Dispatch<SetStateAction<number>>;\n}\n\nconst ButtonGroup: React.FC<ButtonGroupProps> = ({\n  originalWords,\n    words,\n  setGuess,\n  guess,\n  setIndex,\n  isVowel,\n  correct,\n  selectedButton,\n  setSelectedButton\n}) => {\n//   const [selectedButton, setSelectedButton] = useState(0);\n\n  useEffect(() => {\n    console.log('render')\n  }, [selectedButton])\n\n  const handleButtonClick = (id: number) => {\n    setSelectedButton(id === selectedButton ? 0 : id);\n  };\n\n  return (\n    <div className=\"button-group-container\">\n      {words.map((button, index) => (\n        // !correct.includes(button.originalPosition) &&\n        <button\n          key={index + 1}\n          //   onAnimationEnd={() => setWobble(0)}\n          className={`button ${index + 1 === selectedButton ? \"selected\" : \"\"}`}\n          disabled={correct.includes(button.originalPosition)}\n          onClick={() => {\n            if (isVowel) {\n              setIndex(index);\n              setGuess({ ...guess, v: button.originalPosition });\n            } else {\n              setGuess({ ...guess, c: button.originalPosition });\n            }\n            handleButtonClick(index + 1);\n          }}\n        >\n          <p>{button.word}</p>\n          <p>{words[button.originalPosition].word}</p>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAA8BC,SAAS,QAAQ,OAAO;AAClE,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAiB5B,MAAMC,WAAuC,GAAGA,CAAC;EAC/CC,aAAa;EACXC,KAAK;EACPC,QAAQ;EACRC,KAAK;EACLC,QAAQ;EACRC,OAAO;EACPC,OAAO;EACPC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACN;;EAEEb,SAAS,CAAC,MAAM;IACdc,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACvB,CAAC,EAAE,CAACJ,cAAc,CAAC,CAAC;EAEpB,MAAMK,iBAAiB,GAAIC,EAAU,IAAK;IACxCL,iBAAiB,CAACK,EAAE,KAAKN,cAAc,GAAG,CAAC,GAAGM,EAAE,CAAC;EACnD,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,EACpCd,KAAK,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK;IAAA;IACvB;IACApB,OAAA;MAEE;MACAgB,SAAS,EAAG,UAASI,KAAK,GAAG,CAAC,KAAKX,cAAc,GAAG,UAAU,GAAG,EAAG,EAAE;MACtEY,QAAQ,EAAEb,OAAO,CAACc,QAAQ,CAACH,MAAM,CAACI,gBAAgB,CAAE;MACpDC,OAAO,EAAEA,CAAA,KAAM;QACb,IAAIjB,OAAO,EAAE;UACXD,QAAQ,CAACc,KAAK,CAAC;UACfhB,QAAQ,CAAC;YAAE,GAAGC,KAAK;YAAEoB,CAAC,EAAEN,MAAM,CAACI;UAAiB,CAAC,CAAC;QACpD,CAAC,MAAM;UACLnB,QAAQ,CAAC;YAAE,GAAGC,KAAK;YAAEqB,CAAC,EAAEP,MAAM,CAACI;UAAiB,CAAC,CAAC;QACpD;QACAT,iBAAiB,CAACM,KAAK,GAAG,CAAC,CAAC;MAC9B,CAAE;MAAAH,QAAA,gBAEFjB,OAAA;QAAAiB,QAAA,EAAIE,MAAM,CAACQ;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB/B,OAAA;QAAAiB,QAAA,EAAId,KAAK,CAACgB,MAAM,CAACI,gBAAgB,CAAC,CAACI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAfvCX,KAAK,GAAG,CAAC;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBR,CACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpB,EAAA,CA9CIV,WAAuC;AAAA+B,EAAA,GAAvC/B,WAAuC;AAgD7C,eAAeA,WAAW;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}