{"ast":null,"code":"const shuffleWordObjectsWithPositions = wordObjects => {\n  const wordObjectsWithPositions = wordObjects.map(({\n    word,\n    position\n  }) => ({\n    word,\n    originalPosition: position\n  }));\n  let currentIndex = wordObjectsWithPositions.length,\n    randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n    currentIndex--;\n    randomIndex = Math.floor(Math.random() * currentIndex);\n\n    // Swap elements using destructuring assignment\n    [wordObjectsWithPositions[currentIndex], wordObjectsWithPositions[randomIndex]] = [wordObjectsWithPositions[randomIndex], wordObjectsWithPositions[currentIndex]];\n  }\n  return wordObjectsWithPositions;\n};\n// const splitWordIntoVowelsAndConsonants = (\n//   wordObjects: { word: string; position: number }[]\n// ): ShuffledWordObjectWithSplit[] => {\n// //   const result: ShuffledWordObjectWithSplit[] = wordObjects.map(\n// //     ({ word, position }) => {\n// //       const vowels = word.match(/[aeiou]/gi)?.join(\"\") || \"\";\n// //       const consonants = word.match(/[^aeiou]/gi)?.join(\"\") || \"\";\n\n// //       return {\n// //         word,\n// //         position,\n// //         vowels,\n// //         consonants,\n// //       };\n// //     }\n// //   );\n\n// //   return result;\n// };\n\nconst splitWordsIntoVowelsAndConsonants = words => {\n  const vowels = [];\n  const consonants = [];\n  words.forEach((word, index) => {\n    var _word$match, _word$match2;\n    const vowelsInWord = ((_word$match = word.match(/[aeiou]/gi)) === null || _word$match === void 0 ? void 0 : _word$match.join(\"\")) || \"\";\n    const consonantsInWord = ((_word$match2 = word.match(/[^aeiou]/gi)) === null || _word$match2 === void 0 ? void 0 : _word$match2.join(\"\")) || \"\";\n    vowels.push({\n      word: vowelsInWord,\n      originalPosition: index\n    });\n    consonants.push({\n      word: consonantsInWord,\n      originalPosition: index\n    });\n  });\n  return {\n    vowels,\n    consonants\n  };\n};\nexport { shuffleWordObjectsWithPositions };\n\n// // Example usage:\n// const originalWordObjects = [\n//   { word: \"apple\", position: 0 },\n//   { word: \"banana\", position: 1 },\n//   { word: \"cherry\", position: 2 },\n//   { word: \"date\", position: 3 },\n//   { word: \"elderberry\", position: 4 },\n// ];\n\n// const shuffledWordObjectsWithPositions =\n//   shuffleWordObjectsWithPositions(originalWordObjects);\n\n// console.log(\"Original Word Objects:\", originalWordObjects);\n// console.log(\n//   \"Shuffled Word Objects with Positions:\",\n//   shuffledWordObjectsWithPositions\n// );","map":{"version":3,"names":["shuffleWordObjectsWithPositions","wordObjects","wordObjectsWithPositions","map","word","position","originalPosition","currentIndex","length","randomIndex","Math","floor","random","splitWordsIntoVowelsAndConsonants","words","vowels","consonants","forEach","index","_word$match","_word$match2","vowelsInWord","match","join","consonantsInWord","push"],"sources":["/Users/patricepower/Documents/GitHub/shuffled-game/my-app/src/game-engine/shuffleObject.tsx"],"sourcesContent":["interface WordObjectWithPositions {\n  word: string;\n  originalPosition: number;\n}\n\nconst shuffleWordObjectsWithPositions = (\n  wordObjects: { word: string; position: number }[]\n): WordObjectWithPositions[] => {\n  const wordObjectsWithPositions: WordObjectWithPositions[] = wordObjects.map(\n    ({ word, position }) => ({\n      word,\n      originalPosition: position\n    })\n  );\n\n  let currentIndex = wordObjectsWithPositions.length,\n    randomIndex;\n\n  // While there remain elements to shuffle.\n  while (currentIndex > 0) {\n    currentIndex--;\n    randomIndex = Math.floor(Math.random() * currentIndex);\n\n    // Swap elements using destructuring assignment\n    [\n      wordObjectsWithPositions[currentIndex],\n      wordObjectsWithPositions[randomIndex],\n    ] = [\n      wordObjectsWithPositions[randomIndex],\n      wordObjectsWithPositions[currentIndex],\n    ];\n  }\n\n  return wordObjectsWithPositions;\n};\n\ninterface ShuffledWordObjectWithSplit extends WordObjectWithPositions {\n  vowels: string;\n  consonants: string;\n}\n\n// const splitWordIntoVowelsAndConsonants = (\n//   wordObjects: { word: string; position: number }[]\n// ): ShuffledWordObjectWithSplit[] => {\n// //   const result: ShuffledWordObjectWithSplit[] = wordObjects.map(\n// //     ({ word, position }) => {\n// //       const vowels = word.match(/[aeiou]/gi)?.join(\"\") || \"\";\n// //       const consonants = word.match(/[^aeiou]/gi)?.join(\"\") || \"\";\n\n// //       return {\n// //         word,\n// //         position,\n// //         vowels,\n// //         consonants,\n// //       };\n// //     }\n// //   );\n\n// //   return result;\n// };\n\n\nconst splitWordsIntoVowelsAndConsonants = (\n  words: string[]\n): {\n  vowels: WordObjectWithPositions[];\n  consonants: WordObjectWithPositions[];\n} => {\n  const vowels: WordWithPosition[] = [];\n  const consonants: WordWithPosition[] = [];\n\n  words.forEach((word, index) => {\n    const vowelsInWord = word.match(/[aeiou]/gi)?.join(\"\") || \"\";\n    const consonantsInWord = word.match(/[^aeiou]/gi)?.join(\"\") || \"\";\n\n    vowels.push({ word: vowelsInWord, originalPosition: index });\n    consonants.push({ word: consonantsInWord, originalPosition: index });\n  });\n\n  return { vowels, consonants };\n};\n\nexport { shuffleWordObjectsWithPositions };\n\n// // Example usage:\n// const originalWordObjects = [\n//   { word: \"apple\", position: 0 },\n//   { word: \"banana\", position: 1 },\n//   { word: \"cherry\", position: 2 },\n//   { word: \"date\", position: 3 },\n//   { word: \"elderberry\", position: 4 },\n// ];\n\n// const shuffledWordObjectsWithPositions =\n//   shuffleWordObjectsWithPositions(originalWordObjects);\n\n// console.log(\"Original Word Objects:\", originalWordObjects);\n// console.log(\n//   \"Shuffled Word Objects with Positions:\",\n//   shuffledWordObjectsWithPositions\n// );\n"],"mappings":"AAKA,MAAMA,+BAA+B,GACnCC,WAAiD,IACnB;EAC9B,MAAMC,wBAAmD,GAAGD,WAAW,CAACE,GAAG,CACzE,CAAC;IAAEC,IAAI;IAAEC;EAAS,CAAC,MAAM;IACvBD,IAAI;IACJE,gBAAgB,EAAED;EACpB,CAAC,CACH,CAAC;EAED,IAAIE,YAAY,GAAGL,wBAAwB,CAACM,MAAM;IAChDC,WAAW;;EAEb;EACA,OAAOF,YAAY,GAAG,CAAC,EAAE;IACvBA,YAAY,EAAE;IACdE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,YAAY,CAAC;;IAEtD;IACA,CACEL,wBAAwB,CAACK,YAAY,CAAC,EACtCL,wBAAwB,CAACO,WAAW,CAAC,CACtC,GAAG,CACFP,wBAAwB,CAACO,WAAW,CAAC,EACrCP,wBAAwB,CAACK,YAAY,CAAC,CACvC;EACH;EAEA,OAAOL,wBAAwB;AACjC,CAAC;AAOD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,MAAMW,iCAAiC,GACrCC,KAAe,IAIZ;EACH,MAAMC,MAA0B,GAAG,EAAE;EACrC,MAAMC,UAA8B,GAAG,EAAE;EAEzCF,KAAK,CAACG,OAAO,CAAC,CAACb,IAAI,EAAEc,KAAK,KAAK;IAAA,IAAAC,WAAA,EAAAC,YAAA;IAC7B,MAAMC,YAAY,GAAG,EAAAF,WAAA,GAAAf,IAAI,CAACkB,KAAK,CAAC,WAAW,CAAC,cAAAH,WAAA,uBAAvBA,WAAA,CAAyBI,IAAI,CAAC,EAAE,CAAC,KAAI,EAAE;IAC5D,MAAMC,gBAAgB,GAAG,EAAAJ,YAAA,GAAAhB,IAAI,CAACkB,KAAK,CAAC,YAAY,CAAC,cAAAF,YAAA,uBAAxBA,YAAA,CAA0BG,IAAI,CAAC,EAAE,CAAC,KAAI,EAAE;IAEjER,MAAM,CAACU,IAAI,CAAC;MAAErB,IAAI,EAAEiB,YAAY;MAAEf,gBAAgB,EAAEY;IAAM,CAAC,CAAC;IAC5DF,UAAU,CAACS,IAAI,CAAC;MAAErB,IAAI,EAAEoB,gBAAgB;MAAElB,gBAAgB,EAAEY;IAAM,CAAC,CAAC;EACtE,CAAC,CAAC;EAEF,OAAO;IAAEH,MAAM;IAAEC;EAAW,CAAC;AAC/B,CAAC;AAED,SAAShB,+BAA+B;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}